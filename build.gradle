plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id "nu.studer.jooq" version "8.2.1" apply false
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}


subprojects {
    // 全てのサブプロジェクトに共通の設定
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'nu.studer.jooq'

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        runtimeOnly 'org.postgresql:postgresql:42.7.1'
        implementation 'org.springframework.cloud:spring-cloud-aws-messaging:2.2.6.RELEASE'



        // jooq
        implementation 'org.springframework.boot:spring-boot-starter-jooq'
        jooqGenerator 'org.postgresql:postgresql:42.7.1'
        jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    }

    // main-service と file-service に対して shared モジュールを追加
    if (name == 'main-service' || name == 'file-service') {
        dependencies {
            implementation project(':shared')
        }
    }

    repositories {
        mavenCentral()
    }

    // main-service 特有の設定
    project(':main-service') {
        bootRun {
            mainClass = 'com.example.mainservice.MainServiceApplication'
            jvmArgs = [
                    '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005',
            ]
        }

        dependencies {
        }

        jooq {
            version = '3.19.1'
            configurations {
                main {
                    generationTool {
                        jdbc {
                            url = 'jdbc:postgresql://postgres-demo:5432/ddd_demo'
                            user = 'postgres'
                            password = '3wL$2D4s7jiNx'
                        }
                        generator {
                            name = "org.jooq.codegen.JavaGenerator"
                            database {
                                inputSchema = 'public'
                                includes = '.*'
                            }
                            target {
                                packageName = "com.example.mainservice.infrastructure.jooq"
                                directory = "${project.buildDir}/generated/source/jooq/main"
                            }
                        }
                    }
                }
            }
        }
    }

    // file-service 特有の設定
    project(':file-service') {
        bootRun {
            mainClass = 'com.example.fileservice.FileServiceApplication'
            jvmArgs = [
                    '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005',
            ]
        }

        dependencies {
        }

        jooq {
            version = '3.19.1'
            configurations {
                main {
                    generationTool {
                        jdbc {
                            url = 'jdbc:postgresql://postgres-demo:5432/ddd_demo'
                            user = 'postgres'
                            password = '3wL$2D4s7jiNx'
                        }
                        generator {
                            name = "org.jooq.codegen.JavaGenerator"
                            database {
                                inputSchema = 'public'
                                includes = '.*'
                            }
                            target {
                                packageName = "com.example.fileservice.infrastructure.jooq"
                                directory = "${project.buildDir}/generated/source/jooq/main"
                            }
                        }
                    }
                }
            }
        }
    }
}


tasks.named('test') {
    useJUnitPlatform()
}
